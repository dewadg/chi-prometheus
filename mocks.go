// Code generated by MockGen. DO NOT EDIT.
// Source: middleware.go

// Package chi_prometheus is a generated GoMock package.
package chi_prometheus

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	prometheus "github.com/prometheus/client_golang/prometheus"
)

// Mockcounter is a mock of counter interface.
type Mockcounter struct {
	ctrl     *gomock.Controller
	recorder *MockcounterMockRecorder
}

// MockcounterMockRecorder is the mock recorder for Mockcounter.
type MockcounterMockRecorder struct {
	mock *Mockcounter
}

// NewMockcounter creates a new mock instance.
func NewMockcounter(ctrl *gomock.Controller) *Mockcounter {
	mock := &Mockcounter{ctrl: ctrl}
	mock.recorder = &MockcounterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockcounter) EXPECT() *MockcounterMockRecorder {
	return m.recorder
}

// WithLabelValues mocks base method.
func (m *Mockcounter) WithLabelValues(lvs ...string) prometheus.Counter {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range lvs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WithLabelValues", varargs...)
	ret0, _ := ret[0].(prometheus.Counter)
	return ret0
}

// WithLabelValues indicates an expected call of WithLabelValues.
func (mr *MockcounterMockRecorder) WithLabelValues(lvs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithLabelValues", reflect.TypeOf((*Mockcounter)(nil).WithLabelValues), lvs...)
}

// Mockhistogram is a mock of histogram interface.
type Mockhistogram struct {
	ctrl     *gomock.Controller
	recorder *MockhistogramMockRecorder
}

// MockhistogramMockRecorder is the mock recorder for Mockhistogram.
type MockhistogramMockRecorder struct {
	mock *Mockhistogram
}

// NewMockhistogram creates a new mock instance.
func NewMockhistogram(ctrl *gomock.Controller) *Mockhistogram {
	mock := &Mockhistogram{ctrl: ctrl}
	mock.recorder = &MockhistogramMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockhistogram) EXPECT() *MockhistogramMockRecorder {
	return m.recorder
}

// WithLabelValues mocks base method.
func (m *Mockhistogram) WithLabelValues(lvs ...string) prometheus.Observer {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range lvs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WithLabelValues", varargs...)
	ret0, _ := ret[0].(prometheus.Observer)
	return ret0
}

// WithLabelValues indicates an expected call of WithLabelValues.
func (mr *MockhistogramMockRecorder) WithLabelValues(lvs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithLabelValues", reflect.TypeOf((*Mockhistogram)(nil).WithLabelValues), lvs...)
}
